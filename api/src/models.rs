struct ImageObject {
  url: String,
  width: i32, // Integer
  height: i32, // Integer
}

struct ThumbnailObject {
  quality: String,
  url: String,
  width: i32, // Integer
  height: i32, // Integer
}

struct FormatObject {
  index: String,
  bitrate: String,
  init: String,
  url: String,
  itag: String,
  ctype: String,
  clen: String,
  lmt: String,
  projectionType: i32, // Integer
  container: String,
  encoding: String,
  qualityLabel: String,
  resolution: String,
}

struct VideoObject {
  r#type: String, // Constant
  title: String,
  videoId: String,
  author: String,
  authorId: String,
  authorUrl: String,
  authorVerified: bool,
  videoThumbnails: Vec<ThumbnailObject>,
  description: String,
  descriptionHtml: String,
  viewCount: i32, // Integer
  viewCountText: String,
  lengthSeconds: i32, // Integer
  published: i64, // Unix timestamp
  publishedText: String,
  premiereTimestamp: Option<i64>, // Unix timestamp, Only available on premiered videos
  liveNow: bool,
  premium: bool,
  isUpcoming: bool,

  hlsUrl: Option<String>,
  adaptiveFormats: Option<Vec<FormatObject>>,
  recommendedVideos: Option<Vec<VideoObject>>,
}

struct ChannelObject {
  r#type: String, // Constant
  author: String,
  authorId: String,
  authorUrl: String,
  authorVerified: bool,
  authorThumbnails: Vec<ThumbnailObject>,
  autoGenerated: bool,
  subCount: i32, // Integer
  videoCount: i32, // Integer
  description: String,
  descriptionHtml: String,
}

struct PlaylistVideo {
  title: String,
  videoId: String,
  lengthSeconds: i32, // Integer
  videoThumbnails: Vec<ThumbnailObject>,
}

struct PlaylistObject {
  r#type: String, // Constant
  title: String,
  playlistId: String,
  playlistThumbnail: String,
  author: String,
  authorId: String,
  authorUrl: String,
  authorVerified: bool,
  videoCount: i32, // Integer
  videos: Vec<PlaylistVideo>,
}

struct CommentObject {
  author: String,
  authorThumbnails: Vec<ThumbnailObject>,
  authorId: String,
  authorUrl: String,
  isEdited: bool,
  isPinned: bool,
  content: String,
  contentHtml: String,
  published: i64, // Unix timestamp
  publishedText: String,
  likeCount: i32, // Integer
  commentId: String,
  authorIsChannelOwner: bool,
  replies: Option<CommentReplyObject>,
}

struct CommentReplyObject {
  repliesCount: i32, // Integer
  continuation: String,
}